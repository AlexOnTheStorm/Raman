--sign_div_unsign DEN_REPRESENTATION="UNSIGNED" DEN_WIDTH=29 LPM_PIPELINE=70 MAXIMIZE_SPEED=5 NUM_REPRESENTATION="UNSIGNED" NUM_WIDTH=35 SKIP_BITS=0 clken clock denominator numerator quotient remainder
--VERSION_BEGIN 13.1 cbx_cycloneii 2014:03:12:18:15:29:SJ cbx_lpm_abs 2014:03:12:18:15:29:SJ cbx_lpm_add_sub 2014:03:12:18:15:29:SJ cbx_lpm_divide 2014:03:12:18:15:29:SJ cbx_mgl 2014:03:12:18:25:18:SJ cbx_stratix 2014:03:12:18:15:31:SJ cbx_stratixii 2014:03:12:18:15:31:SJ cbx_util_mgl 2014:03:12:18:15:30:SJ  VERSION_END


-- Copyright (C) 1991-2014 Altera Corporation
--  Your use of Altera Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Altera Program License 
--  Subscription Agreement, Altera MegaCore Function License 
--  Agreement, or other applicable license agreement, including, 
--  without limitation, that your use is for the sole purpose of 
--  programming logic devices manufactured by Altera and sold by 
--  Altera or its authorized distributors.  Please refer to the 
--  applicable agreement for further details.


FUNCTION alt_u_div_mah (clk_en, clock, denominator[28..0], numerator[34..0])
RETURNS ( den_out[28..0], quotient[34..0], remainder[28..0]);

--synthesis_resources = lut 645 reg 7741 
OPTIONS ALTERA_INTERNAL_OPTION = "{-to DFF_Den_Out} POWER_UP_LEVEL=HIGH;{-to DFF_Denominator} POWER_UP_LEVEL=HIGH";

SUBDESIGN sign_div_unsign_2si
( 
	clken	:	input;
	clock	:	input;
	denominator[28..0]	:	input;
	numerator[34..0]	:	input;
	quotient[34..0]	:	output;
	remainder[28..0]	:	output;
) 
VARIABLE 
	divider : alt_u_div_mah;
	DFF_Den_Out[985..0] : dffe
		WITH (
			power_up = "high"
		);
	DFF_Denominator[28..0] : dffe
		WITH (
			power_up = "high"
		);
	DFF_Numerator[34..0] : dffe;
	DFF_Quotient[1189..0] : dffe;
	DFF_Remainder[985..0] : dffe;
	aclr	: NODE;
	norm_num[34..0]	: WIRE;
	protect_quotient[34..0]	: WIRE;
	protect_remainder[28..0]	: WIRE;

BEGIN 
	divider.clk_en = clken;
	divider.clock = clock;
	divider.denominator[] = DFF_Denominator[].q;
	divider.numerator[] = DFF_Numerator[].q;
	DFF_Den_Out[].clk = clock;
	DFF_Den_Out[].d = ( ( divider.den_out[28..0], DFF_Den_Out[985..29].q));
	DFF_Den_Out[].ena = clken;
	DFF_Den_Out[].prn = (! aclr);
	DFF_Denominator[].clk = clock;
	DFF_Denominator[].d = denominator[];
	DFF_Denominator[].ena = clken;
	DFF_Denominator[].prn = (! aclr);
	DFF_Numerator[].clk = clock;
	DFF_Numerator[].clrn = (! aclr);
	DFF_Numerator[].d = norm_num[];
	DFF_Numerator[].ena = clken;
	DFF_Quotient[].clk = clock;
	DFF_Quotient[].clrn = (! aclr);
	DFF_Quotient[].d = ( ( divider.quotient[34..0], DFF_Quotient[1189..35].q));
	DFF_Quotient[].ena = clken;
	DFF_Remainder[].clk = clock;
	DFF_Remainder[].clrn = (! aclr);
	DFF_Remainder[].d = ( ( divider.remainder[28..0], DFF_Remainder[985..29].q));
	DFF_Remainder[].ena = clken;
	aclr = GND;
	norm_num[] = numerator[];
	protect_quotient[34..0] = DFF_Quotient[34..0].q;
	protect_remainder[28..0] = DFF_Remainder[28..0].q;
	quotient[] = protect_quotient[];
	remainder[] = protect_remainder[];
END;
--VALID FILE
